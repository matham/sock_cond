#:kivy 1.9.0
#@PydevCodeAnalysisIgnore
#:import moas moa.base.named_moas
#:import clock time.clock


<RootStage@MoaStage>:
    name: 'Root_stage'
    on_finished: app.timer.set_active_slice('Done')
    on_finished: if self.finished: barst.stop_devices()
    InitBarstStage:
        id: barst
        name: 'barst'
        on_started: app.timer.set_active_slice('Init')
    VerifyConfigStage:
        id: verify
        name: 'verify'
        animal_id: app.next_animal_btn.animal_id
    MoaStage:
        order: 'parallel'
        RandValves:
            name: 'rand_valves'
            repeat: -1
        MoaStage:
            name: 'animal_stage'
            repeat: -1
            id: animal_stage
            DigitalGateStage:
                on_started: app.timer.set_active_slice('Ready')
                name: 'animal_wait'
                device: barst.next_animal_dev
                exit_state: True
                on_finished: if self.finished and not self.stopped: barst.create_writers(verify.video_filename, verify.num_trials[verify.curr_animal_cls])
            Delay:
                name: 'prehab'
                delay: verify.prehab
                on_started: if self.started: verify.start_trials()
                on_started: app.timer.set_active_slice('Prehab')
            MoaStage:
                name: 'trial'
                id: trial
                repeat: verify.num_trials[verify.curr_animal_cls]
                on_count: app.timer.update_slice_attrs('Trial', text='Trial ({})'.format(self.count + 1))
                on_started: app.timer.update_slice_attrs('Trial', text='Trial ({})'.format(self.count + 1))
                Delay:
                    delay: verify.pre_record
                    on_started: if self.started: barst.set_trial_writers(trial.count)
                    on_started: if self.started: verify.trial_log['trial'] = trial.count
                    on_started: if self.started: verify.trial_log['ts'] = clock()
                    on_started: if self.started: verify.pre_trial()
                    on_started: app.timer.set_active_slice('Pre')
                Delay:
                    on_started: if self.started: verify.set_odor(True)
                    delay: verify.trial_duration - verify.shock_duration
                    on_started: app.timer.set_active_slice('Trial')
                Delay:
                    on_started: if self.started: verify.set_shock(True)
                    delay: verify.shock_duration
                    on_finished: if self.finished: verify.set_shock(False)
                    on_finished: if self.finished: verify.set_odor(False)
                Delay:
                    delay: verify.post_record
                    on_finished: if self.finished: barst.reset_trial_writers()
                    on_started: app.timer.set_active_slice('Post')
                Delay:
                    delay_type: 'random'
                    min: verify.iti_min[verify.curr_animal_cls]
                    max: verify.iti_max[verify.curr_animal_cls]
                    on_delay: app.timer.update_slice_attrs('ITI', duration=self.delay)
                    on_finished: if self.finished: verify.post_trial()
                    on_started: app.timer.set_active_slice('ITI')
            Delay:
                name: 'posthab'
                delay: verify.posthab
                on_started: app.timer.set_active_slice('Posthab')
