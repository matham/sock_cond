#:kivy 1.9.0
#:import moas moa.base.named_moas
#:import VerifyConfigStage sock_cond.stages.VerifyConfigStage
#@PydevCodeAnalysisIgnore


# the root level widget
<MainView>:
    GridLayout:
        rows: 1
        size_hint: None, None
        size: self.minimum_size
        padding: 20
        GridLayout:
            cols: 1
            size_hint: None, None
            size: self.minimum_size
            padding: [20]
            spacing: 40
            ExperimentControl
            TimeLine
                on_parent: app.timer = self
            SimDevs
        GridLayout:
            size_hint: None, None
            size: self.minimum_size
            rows: 2
            padding: [20]
            spacing: [30]
            on_parent: app.displays = self


# various button/switch widgets
<SwitchIcon@ToggleButtonBehavior+LabeledIcon>
<PressIcon@ButtonBehavior+LabeledIcon>

<ToggleDevice@SwitchIcon>:
    dev_disabled: False
    disabled: app.app_state == 'clear' or app.app_state == 'exception' or self.dev_disabled
    text_height: 50
    halign: 'center'

<DarkDevice@ToggleDevice>
    canvas.before:
        Color:
            rgba: [0.5, 0.5, 0.5, 0.08]
        Rectangle:
            size: self.size
            pos: self.pos

<DevContainer@GridLayout>:
    size_hint: None, None
    size: self.minimum_size
    cols: 8
    spacing: [10, 0]

# holds the simulation devices
<SimDevs@GridLayout>:
    cols: 1
    size_hint: None, None
    size: self.minimum_size
    on_parent: app.simulation_devices = self
    DevContainer:
        id: odors
    Widget:
        size_hint_y: None
        height: 20
    DevContainer:
        id: cams
    Widget:
        size_hint_y: None
        height: 20
    DevContainer:
        ToggleDevice:
            id: shocker
            text: 'Shocker'
        Widget:
            size_hint_x: None
            width: 30
        SwitchIcon:
            id: simulate
            text: 'Simulate?'
            text_height: 30
            background_down: 'checkbox-checked-gray-th.png'
            background_normal: 'checkbox-unchecked-gray-th.png'
            disabled: app.app_state != 'clear'
            on_state: app.simulate = self.state == 'down'


# controls for starting/stopping the experiment
<StartingExperiment@GridLayout>:
    cols: 1
    size_hint: None, None
    height: self.minimum_height
    width: 200
    padding: [5]
    spacing: [5]
    TextInput:
        height: 2 * self.line_height + 5
        size_hint_y: None
        text: app.exp_config_path
        on_text: app.exp_config_path = self.text
    GridLayout:
        rows: 1
        size_hint_y: None
        height: 50
        spacing: [5]
        Button:
            text: 'Start'
            on_press: app.start_stage()
            disabled: app.app_state != 'clear'
        Button:
            text: 'Recover'
            on_press: app.start_stage(True)
            disabled: app.app_state != 'clear'

<ExperimentControl@GridLayout>:
    size_hint: None, None
    size: self.minimum_size
    rows: 1
    spacing: [20, 0]
    StartingExperiment
    Widget:
        size_hint: None, None
        size: switch.size
        SwitchIcon:
            pos: self.parent.pos
            id: switch
            size_hint: None, None
            text: 'Pause' if self.state == 'normal' else 'Continue'
            max_width: 0
            text_height: 30
            background_down: 'play.png'
            background_normal: 'pause.png'
            icon_size: 48, 48
            on_press:
                app.base_stage is not None and (app.base_stage.unpause() if self.state == 'normal' else app.base_stage.pause())
                app.app_state =  'running' if self.state == 'normal' else 'paused'
            disabled: app.app_state != 'running' and app.app_state != 'paused'
    Widget:
        size_hint: None, None
        size: press.size
        PressIcon:
            pos: self.parent.pos
            id: press
            text: 'Stop'
            max_width: 0
            text_height: 30
            background_down: 'stop_0.png'
            background_normal: 'stop_1.png'
            icon_size: 48, 48
            on_press: app.base_stage and app.base_stage.stop()
            disabled: app.app_state != 'running'
    GridLayout:
        rows: 2
        size_hint_x: None
        width: 500
        padding: [5]
        spacing: [5]
        BoxLayout:
            spacing: 20
            Label:
                text: 'Day:'
                size_hint_x: None
                width: self.texture_size[0]
            Spinner:
                id: day
                text: '-1'
                values: [] if moas.verify is None else map(str, moas.verify.days)
                value: int(self.text)
        BoxLayout:
            spacing: 20
            Label:
                text: 'Group:'
                size_hint_x: None
                width: self.texture_size[0]
            Spinner:
                id: group
                values: [] if moas.verify is None else moas.verify.groups
        Spinner:
            id: exp_type
            values: VerifyConfigStage.exp_classes
            size_hint_x: None
            width: 100
        BoxLayout:
            spacing: 20
            Label:
                text: 'Cycle:'
                size_hint_x: None
                width: self.texture_size[0]
            Spinner:
                id: cycle
                text: '-1'
                values: [] if moas.verify is None else map(str, moas.verify.cycles)
                value: int(self.text)
        BoxLayout:
            spacing: 20
            Label:
                text: 'Animal:'
                size_hint_x: None
                width: self.texture_size[0]
            Spinner:
                id: animal_id
                text: '-1'
                values: [] if moas.verify is None else map(str, moas.verify.animal_cls.keys())
                value: int(self.text)
        Button:
            valid_animal: bool(moas.verify and animal_id.value != -1 and animal_id.value in moas.verify.animal_cls and moas.verify.animal_cls[animal_id.value] == exp_type.text)
            text: 'Next'
            on_parent: app.next_animal_btn = self
            disabled: app.app_state != 'running' or not self.valid_animal or day.value == -1 or cycle.value == -1 or not group.text
            animal_id: animal_id.value
            day: day.value
            cycle: cycle.value
            group: group.text
    Label:
        size_hint_x: None
        width: self.height if self.warn_text else 0
        on_touch_down: app.exception_value and self.collide_point(*args[1].pos) and (app.popup_anim.cancel(self) or setattr(self, 'warn_alpha', int(bool(app.exception_value))) or app.err_popup.open())
        warn_alpha: 0.
        warn_text: app.exception_value
        on_warn_text:
            if self.warn_text and app.popup_anim: app.popup_anim.start(self)
            else: setattr(self, 'warn_alpha', 0)
        canvas:
            Color:
                rgb: 1, 1, 1
                a: self.warn_alpha
            Rectangle:
                pos: self.pos
                size: self.size
                source: 'Remove_1.png'
