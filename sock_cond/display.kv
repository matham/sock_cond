#:kivy 1.9.0
#:import moas moa.base.named_moas
#@PydevCodeAnalysisIgnore
#:import VerifyConfigStage sock_cond.stages.VerifyConfigStage


# the root level widget
<MainView@ScrollView>:
    GridLayout:
        rows: 1
        size_hint: None, None
        size: self.minimum_size
        padding: 20
        GridLayout:
            cols: 1
            size_hint: None, None
            size: self.minimum_size
            padding: [20]
            spacing: 40
            SockControl
            TimeLine
                on_parent: app.timer = self
            SimDevs
        GridLayout:
            id: displays
            size_hint: None, None
            size: self.minimum_size
            rows: 2
            padding: [20]
            spacing: [30]


<DevContainer@GridLayout>:
    size_hint: None, None
    size: self.minimum_size
    cols: 8
    spacing: [10, 0]

# holds the simulation devices
<SimDevs@GridLayout>:
    cols: 1
    size_hint: None, None
    size: self.minimum_size
    on_parent: app.simulation_devices = self
    DevContainer:
        id: odors
    Widget:
        size_hint_y: None
        height: 20
    DevContainer:
        id: cams
    Widget:
        size_hint_y: None
        height: 20
    DevContainer:
        ToggleDevice:
            id: shocker
            text: 'Shocker'
        Widget:
            size_hint_x: None
            width: 30
        SwitchIcon:
            id: simulate
            text: 'Simulate?'
            text_height: 30
            background_down: 'checkbox-checked-gray-th.png'
            background_normal: 'checkbox-unchecked-gray-th.png'
            disabled: app.app_state != 'clear'
            on_state: app.simulate = self.state == 'down'


<SockControl@ExperimentControl>:
    GridLayout:
        rows: 2
        size_hint_x: None
        width: self.minimum_width
        padding: [5]
        spacing: [5]
        GridLayout:
            rows: 1
            size_hint_x: None
            width: self.minimum_width
            spacing: 20
            Label:
                text: 'Day:'
                size_hint_x: None
                width: self.texture_size[0]
            Spinner:
                id: day
                text: '' if moas.verify is None else moas.verify.days[0]
                values: [] if moas.verify is None else sorted(moas.verify.days)
                size_hint_x: None
                width: max(self.texture_size[0], 80)
        GridLayout:
            rows: 1
            size_hint_x: None
            width: self.minimum_width
            spacing: 20
            Label:
                text: 'Group:'
                size_hint_x: None
                width: self.texture_size[0]
            Spinner:
                id: group
                values: [] if moas.verify is None else sorted(moas.verify.groups)
                size_hint_x: None
                width: max(self.texture_size[0], 80)
        Spinner:
            id: exp_type
            text: VerifyConfigStage.exp_classes[0]
            values: sorted(VerifyConfigStage.exp_classes)
            size_hint_x: None
            width: 140
            on_text: if moas.verify: moas.verify.curr_animal_cls = self.text
        GridLayout:
            rows: 1
            size_hint_x: None
            width: self.minimum_width
            spacing: 20
            Label:
                text: 'Cycle:'
                size_hint_x: None
                width: self.texture_size[0]
            Spinner:
                id: cycle
                text: '-1'
                values: [] if moas.verify is None else map(str, sorted(moas.verify.cycles))
                value: int(self.text)
                size_hint_x: None
                width: max(self.texture_size[0], 80)
        GridLayout:
            rows: 1
            size_hint_x: None
            width: self.minimum_width
            spacing: 20
            Label:
                text: 'Animal:'
                size_hint_x: None
                width: self.texture_size[0]
            Spinner:
                id: animal_id
                text: '-1'
                values: [] if moas.verify is None else map(str, sorted(moas.verify.animal_cls.keys()))
                value: int(self.text)
                size_hint_x: None
                width: max(self.texture_size[0], 80)
        Button:
            size_hint_x: None
            width: 80
            valid_animal: bool(moas.verify and animal_id.value != -1 and ((animal_id.value in moas.verify.animal_cls and exp_type.text in moas.verify.animal_cls[animal_id.value]) or not moas.verify.enforce_match))
            text: 'Next'
            on_parent: app.next_animal_btn = self
            disabled: app.app_state != 'running' or not self.valid_animal or cycle.value == -1 or not group.text
            animal_id: animal_id.value
            day: day.text
            cycle: cycle.value
            group: group.text
